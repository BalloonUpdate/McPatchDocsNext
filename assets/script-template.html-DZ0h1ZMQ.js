import{_ as t,r as c,o,c as l,a as s,b as n,d as p,e as a}from"./app-QHMUpCa2.js";const i={},d=a("<p>管理端打包后，可能要把更新包上传到自己的服务器，或者对象存储上供大家下载。</p><p>管理端本身没有直接上传文件的能力，但可以通过“上传脚本模板”这个特性间接将更新包上传到服务器上。</p><p>配置好后，每次打包完成自动生成一个上传脚本，双击运行后也可以自动把更新包上传到自定义的服务器上。</p><p>在使用这个功能之前，需要提前准备好对应的cli上传工具，比如要上传到对象存储，就要准备对象存储的命令行工具。</p><p>打开管理端的文件夹，编辑管理端的配置文件<code>config.toml</code>，将<code>upload-script-output</code>后面的<code>.txt</code>替换成<code>.bat</code>好方便在Windows系统上运行。</p><p>再在管理端exe文件旁边创建一个空文件<code>upload-template.txt</code>。</p><p>这个文件就是模板文件了，打包后会按这个模板文件的内容，自动生成一个新的上传脚本。</p><p>这里以windows平台上传到腾讯对象存储为例，其它平台和上传方式也是同理。</p>",8),r={href:"https://cloud.tencent.com/document/product/436/63144",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>将下载好的<code>coscli-windows.exe</code>移动到管理端文件夹里来，再创建一个新文件<code>tencent-cos.yml</code>作为coscli的配置文件。</p><p>打开<code>tencent-cos.yml</code>进行编辑，将下面内容粘贴进去：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">cos</span><span class="token punctuation">:</span>
  <span class="token key atrule">base</span><span class="token punctuation">:</span>
    <span class="token key atrule">secretid</span><span class="token punctuation">:</span> aaaaa
    <span class="token key atrule">secretkey</span><span class="token punctuation">:</span> bbbbb
    <span class="token key atrule">sessiontoken</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> https
  <span class="token key atrule">buckets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ccccc
    <span class="token key atrule">alias</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>default<span class="token punctuation">-</span>bucket
    <span class="token key atrule">region</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> ddddd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有4个内容需要手动替换成自己的：</p><ol><li>aaaaa：替换成自己的Secret Id</li><li>bbbbb：替换成自己的Secret Key</li><li>ccccc：替换成自己的桶名</li><li>ddddd：替换成自己的地域</li></ol><p>完成后保存关闭，coscli就配置完毕了。现在来配置从脚本调用coscli的命令。</p><p>打开编辑模板文件<code>upload-template.txt</code>，将下面的内容粘贴进去，然后保存关闭：</p><div class="language-batch line-numbers-mode" data-ext="batch"><pre class="language-batch"><code><span class="token operator">@</span><span class="token command"><span class="token keyword">echo</span> off</span>

{{ for f in upload_files }}
<span class="token command"><span class="token keyword">coscli</span>-windows.exe <span class="token parameter attr-name">-c</span> tencent-cos.yml sync <span class="token string">&quot;{f}&quot;</span> <span class="token string">&quot;cos://my-default-bucket/backgrounds/{f}&quot;</span> <span class="token parameter attr-name">--force</span> {{ endfor }}</span>

{{ for f in delete_files }}
<span class="token command"><span class="token keyword">coscli</span>-windows.exe <span class="token parameter attr-name">-c</span> tencent-cos.yml rm <span class="token string">&quot;cos://my-default-bucket/backgrounds/{f}&quot;</span> <span class="token parameter attr-name">--force</span> {{ endfor }}</span>

<span class="token command"><span class="token keyword">pause</span></span>
<span class="token command"><span class="token keyword">del</span> <span class="token variable">%0</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>脚本最后一行代表删除自己，当上传完成后，可以按任意键继续，然后脚本会删除自己。如果上传失败了，可以手动叉掉窗口，然后重新运行一次上传。</p><p>上面是以windows平台为例子，如果是linux平台，可以用模板生成sh文件，只需要在配置文件config.toml中将生成的脚本文件后缀名修改成<code>.sh</code>。</p>`,10);function k(m,v){const e=c("ExternalLinkIcon");return o(),l("div",null,[d,s("p",null,[n("首先要从"),s("a",r,[n("腾讯云的官网"),p(e)]),n("下载COSCLI工具，这里要下载自己操作系统对应的版本。")]),u])}const f=t(i,[["render",k],["__file","script-template.html.vue"]]);export{f as default};
